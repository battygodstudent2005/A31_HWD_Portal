@page "/Dashboard"
@rendermode InteractiveServer
@using System.Data
@using Microsoft.Data.SqlClient
@using System.Diagnostics
@inject UserInfoService _userInfoService
@inject IJSRuntime JSRuntime
@inject IConfiguration _configuration // [新增] 注入 IConfiguration 服務，以便讀取 appsettings.json 中的連線字串
@using System.Text.RegularExpressions


@* 頂部篩選與操作區塊 - 優化空間使用 *@
<div class="row mb-3 g-2">
    <div class="col-lg-5">
        <div class="card shadow-sm h-100">
            <div class="card-header py-2">
                <i class="bi bi-funnel-fill me-2"></i>篩選條件
            </div>
            <div class="card-body py-2">
                <div class="row g-2">
                    <div class="col-md-6">
                        <label for="year-select" class="form-label mb-1 small">選擇年份：</label>
                        <select id="year-select" class="form-select form-select-sm" @bind="SelectedYear">
                            @foreach (var year in YearList)
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="item-select" class="form-label mb-1 small">選擇項目：</label>
                        <select id="item-select" class="form-select form-select-sm" @bind="SelectedHwOption">
                            @foreach (var option in AllOptions)
                            {
                                <option value="@option">@option</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-3">
        <div class="card shadow-sm h-100">
            <div class="card-header py-2">
                <i class="bi bi-gear-fill me-2"></i>操作設定
            </div>
            <div class="card-body py-2">
                <div class="d-grid gap-1">
                    <button class="btn btn-success btn-sm" @onclick="UpdateToServer">
                        <i class="bi bi-cloud-upload me-1"></i>上傳核准結果
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card shadow-sm h-100">
            <div class="card-header py-2">
                <i class="bi bi-graph-up me-2"></i>SOW執行狀況
            </div>
            <div class="card-body p-1">
                <div class="row g-1 h-100">
                    <div class="col-6">
                        <div class="status-card non-ready compact">
                            <div class="status-number">@GetStatusCount("Non-Ready")</div>
                            <div class="status-label">Non-Ready</div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="status-card ready compact">
                            <div class="status-number">@GetStatusCount("Ready")</div>
                            <div class="status-label">Ready</div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="status-card checked compact">
                            <div class="status-number">@GetStatusCount("Checked")</div>
                            <div class="status-label">Checked</div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="status-card approval compact">
                            <div class="status-number">@GetStatusCount("Approval")</div>
                            <div class="status-label">Approval</div>
                        </div>
                    </div>
                    <div class="col-12 mt-1">
                        <div class="status-card overdue compact">
                            <div class="status-number">@GetStatusCount("Overdue")</div>
                            <div class="status-label">Overdue</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* 主要內容區塊改為佔滿整行 *@
<div class="row">
    <div class="col-lg-12">
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>專案資訊</span>
                @if (sqlQueryTime != DateTime.MinValue)
                {
                    <small class="text-muted">資料時間: @sqlQueryTime.ToString("yyyy/MM/dd HH:mm:ss")</small>
                }
            </div>

            @* 搜尋功能區塊 *@
            @if (projectData != null && projectData.Rows.Count > 0)
            {
                <div class="card-body border-bottom py-2">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="請輸入要顯示的欄位名稱 (例如 CSLP_PTL)..." @bind="searchTerm" @oninput="FilterData" />
                                @if (!string.IsNullOrWhiteSpace(searchTerm))
                                {
                                    <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="ClearSearch">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end align-items-center">
                                <small class="text-muted">
                                    顯示 @GetProjectCount(filteredData) / @GetProjectCount(projectData) 個專案
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="card-body p-0">
                <div class="table-container">
                    @if (isLoading)
                    {
                        @* 載入中畫面 *@
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                            <p class="mt-2 text-muted">正在載入專案資料...</p>
                        </div>
                    }
                    else if (filteredData != null && filteredData.Rows.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover table-sm table-striped mb-0">
                                <thead class="table-info sticky-header">
                                    <tr>
                                        @foreach (DataColumn col in filteredData.Columns)
                                        {
                                            // 直接在這裡判斷標題是否需要變色
                                            var headerStyle = yellowBackgroundColumns.Contains(col.ColumnName)
                                            ? "background-color: #ffff00 !important;"
                                            : "";
                                            // 判斷是否為專案欄位，若是則加上手形指標的 class
                                            var headerClass = (col.ColumnName != "Stage" && col.ColumnName != "Item") ? "clickable-cell" : "";
                                            <th class="@headerClass"
                                                style="@headerStyle"
                                                @onclick="@(() => { if (col.ColumnName != "Stage" && col.ColumnName != "Item") OpenProjectInfoModal(col.ColumnName); })">
                                                <span class="header-content">@col.ColumnName</span>
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow row in filteredData.Rows)
                                    {
                                        var rowClass = (filteredData.Columns.Contains("Item") && string.IsNullOrEmpty(row["Item"].ToString()))
                                        ? "empty-item-row"
                                        : "";
                                        <tr class="@rowClass">
                                            @foreach (DataColumn col in filteredData.Columns)
                                            {
                                                var isProjectCell = col.ColumnName != "Stage" && col.ColumnName != "Item";
                                                var cellClass = isProjectCell ? "clickable-cell" : "";
                                                var cellValue = row[col].ToString();
                                                <td class="@($"{cellClass} {(IsCellSelected(row, col) ? "cell-selected" : "")}")"
                                                    style="@GetCellStyle(cellValue, col.ColumnName)"
                                                    title="@cellValue"
                                                    @onclick="() => SelectCell(row, col)"
                                                    @oncontextmenu:preventDefault
                                                    @oncontextmenu="@((e) => ShowContextMenu(e, row, col))">
                                                    <div class="cell-content">
                                                        @GetStatusIndicator(cellValue)
                                                        @CleanCellValue(cellValue)
                                                    </div>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else if (projectData != null && projectData.Rows.Count > 0 && !string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <div class="text-center p-4">
                            <i class="bi bi-database text-muted" style="font-size: 3rem;"></i>
                            <p class="mt-2 text-muted">沒有符合搜尋條件的資料</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                            <p class="mt-2 text-muted">沒有可顯示的資料。請選擇年份和項目。</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* 成功訊息 Modal *@
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">
                    <i class="bi bi-check-circle-fill me-2"></i>操作成功
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center">
                    <i class="bi bi-cloud-upload-fill text-success" style="font-size: 4rem;"></i>
                    <h4 class="mt-3">儲存完成！</h4>
                    <p class="text-muted">@successMessage</p>
                </div>
                <hr />
                <div class="update-details">
                    <p class="fw-bold text-start mb-2">更新摘要：</p>
                    <div class="details-list">
                        @if (successDetails.Any())
                        {
                            <ul>
                                @foreach (var detail in successDetails)
                                {
                                    <li>@((MarkupString)detail)</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted text-center">沒有詳細的更新資訊。</p>
                        }
                    </div>
                </div>
                <div class="mt-4 text-center">
                    <small class="text-muted">共更新了 @updatedRecordsCount 筆記錄</small>
                </div>
            </div>
            <div class="modal-footer justify-content-center border-0">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">
                    <i class="bi bi-hand-thumbs-up me-2"></i>了解
                </button>
            </div>
        </div>
    </div>
</div>
@* 錯誤訊息 Modal *@
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>操作失敗
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="bi bi-x-circle text-danger" style="font-size: 3rem;"></i>
                <h4 class="mt-3 text-danger">儲存失敗！</h4>
                <p class="text-muted">@errorMessage</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">確定</button>
            </div>
        </div>
    </div>
</div>

@* 專案資訊編輯 Modal *@
<div class="modal fade" id="projectInfoModal" tabindex="-1" aria-labelledby="projectInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="projectInfoModalLabel">
                    <i class="bi bi-pencil-square me-2"></i>編輯專案資訊：<span class="fw-bold">@modalProjectName</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row g-3">
                        @* 專案時程區塊 *@
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <i class="bi bi-calendar-week me-2"></i>專案時程
                                </div>
                                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                                    @* 直接遍歷 currentMilestones 列表，UI 邏輯大幅簡化 *@
                                    @if (currentMilestones.Any())
                                    {
                                        @foreach (var milestone in currentMilestones)
                                        {
                                            <div class="mb-3">
                                                @* 直接使用物件的屬性來顯示標籤 *@
                                                <label class="form-label">@milestone.DisplayName</label>
                                                @* 直接綁定到物件的 Date 屬性 *@
                                                <input type="text" class="form-control" @bind="milestone.Date" />
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted">正在載入 Milestone 資料或無可用項目...</p>
                                    }
                                </div>
                            </div>
                        </div>

                        @* 專案人員區塊 *@
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <i class="bi bi-people-fill me-2"></i>專案人員
                                </div>
                                @* [修改後] *@
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="personDM" class="form-label">專案經理 (DM)</label>
                                        @* 將 @bind 的對象從 currentProjectInfo 改為 projectPersonnel *@
                                        <input type="text" id="personDM" class="form-control" @bind="projectPersonnel.DM" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="personDL" class="form-label">專案主任 (DL)</label>
                                        @* 將 @bind 的對象從 currentProjectInfo 改為 projectPersonnel *@
                                        <input type="text" id="personDL" class="form-control" @bind="projectPersonnel.DL" />
                                    </div>
                                    <div>
                                        <label for="personDE" class="form-label">專案工程師 (DE)</label>
                                        @* 將 @bind 的對象從 currentProjectInfo 改為 projectPersonnel *@
                                        <input type="text" id="personDE" class="form-control" @bind="projectPersonnel.DE" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg me-2"></i>取消
                </button>
                @* 新增儲存按鈕的載入狀態判斷 *@
                <button type="button" class="btn btn-primary" @onclick="SaveProjectInfo" disabled="@isSavingProjectInfo">
                    @if (isSavingProjectInfo)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">儲存中...</span>
                    }
                    else
                    {
                        <i class="bi bi-save me-2"></i>
                        <span>儲存變更</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@* 右鍵操作選單 (Context Menu) *@
@if (showContextMenu)
{
    <div class="context-menu" style="left: @(contextMenuX)px; top: @(contextMenuY)px;" @onclick:stopPropagation>
        <ul class="list-unstyled mb-0">
            <li @onclick="() => ContextMenuAction(MenuAction.Approve)">
                <i class="bi bi-check-circle-fill me-2"></i> 核准
            </li>
            <li @onclick="() => ContextMenuAction(MenuAction.CancelApproval)">
                <i class="bi bi-x-circle me-2"></i> 取消核准
            </li>
            <li class="menu-divider"></li>
            <li>
                <i class="bi bi-upload me-2"></i> 上傳文件 <span class="soon-badge">SOON</span>
            </li>
            <li>
                <i class="bi bi-download me-2"></i> 下載附件 <span class="soon-badge">SOON</span>
            </li>
            <li class="menu-divider"></li>
            <li @onclick="() => ContextMenuAction(MenuAction.CopyFolderPath)">
                <i class="bi bi-clipboard me-2"></i> 複製資料夾路徑
            </li>
        </ul>
    </div>

    @* 一個全螢幕的覆蓋層，用於點擊時關閉選單 *@
    <div class="context-menu-overlay" @onclick="CloseContextMenu"></div>
}



@code {
    // 宣告一個屬性來接收從上層 MainLayout 傳來的串聯參數
    [CascadingParameter] 
    public MainLayout? Layout { get; set; }

    private bool isLoading = false;
    private DataTable projectData = new DataTable();
    private DataTable filteredData = new DataTable();
    private DateTime sqlQueryTime = DateTime.MinValue;
    private string searchTerm = "";
    private string sortColumn = "";
    private bool sortAscending = true;
    // 儲存選中的儲存格資訊
    private string selectedCellKey = "";
    private string selectedProjectName = "";
    private string selectedStage = "";
    private string selectedItem = "";

    // Modal 相關變數
    private string successMessage = "";
    private string errorMessage = "";

    // 用於控制專案資訊儲存時的載入動畫
    private bool isSavingProjectInfo = false;

    // 右鍵選單 (Context Menu) 相關變數
    private bool showContextMenu = false; // 控制選單是否顯示
    private double contextMenuX;          // 選單的 X 座標
    private double contextMenuY;          // 選單的 Y 座標

    private int updatedRecordsCount = 0;
    // 用於存放成功的詳細資訊
    private List<string> successDetails = new List<string>();
    // 用於追蹤已變更的專案欄位名稱集合
    private HashSet<string> modifiedProjectColumns = new HashSet<string>();
    // 建立一個集合，用來存放需要標示黃底的「欄位名稱」
    private HashSet<string> yellowBackgroundColumns = new HashSet<string>();
    // 用於儲存從SOW_{Year}資料表讀取的 Milestone 清單
    private DataTable milestoneData = new DataTable();
    // 改用 List<MilestoneInfo> 來管理 Modal 中的所有 Milestone 項目，結構更清晰
    private List<MilestoneInfo> currentMilestones = new List<MilestoneInfo>();
    // 儲存專案人員資訊的獨立物件
    private ProjectPersonnel projectPersonnel = new ProjectPersonnel();
    // 專案人員的資料模型
    private class ProjectPersonnel
    {
        public string? DM { get; set; }
        public string? DL { get; set; }
        public string? DE { get; set; }
    }


    // 定義選單操作的列舉，方便管理
    private enum MenuAction
    {
        Approve,
        CancelApproval,
        CopyFolderPath
    }
    private int _selectedYear;
    private int SelectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                // 當年份變更時，除了載入專案資料，也要重新載入對應年份的 Milestone 資料
                _ = LoadProjectData();
                _ = LoadMilestoneData(); // 呼叫新的方法
            }
        }
    }
    private string? _selectedHwOption;
    private string? SelectedHwOption
    {
        get => _selectedHwOption;
        set
        {
            if (_selectedHwOption != value)
            {
                _selectedHwOption = value;
                _ = LoadProjectData();
            }
        }
    }

    /// <summary>
    /// 處理右鍵點擊事件，顯示操作選單
    /// </summary>
    /// <param name="e">滑鼠事件參數，用於獲取座標</param>
    /// <param name="row">被點擊的儲存格所在的 DataRow</param>
    /// <param name="col">被點擊的儲存格所在的 DataColumn</param>
    private void ShowContextMenu(MouseEventArgs e, DataRow row, DataColumn col)
    {
        // 如果點擊的是 Stage 或 Item 欄，則不顯示選單
        if (col.ColumnName == "Stage" || col.ColumnName == "Item") return;

        // 產生當前右鍵點擊儲存格的唯一鍵值
        string stage = row["Stage"]?.ToString() ?? "";
        string item = row["Item"]?.ToString() ?? "";
        string projectName = col.ColumnName;
        string currentCellKey = $"{stage}_{item}_{projectName}";

        // 只有當右鍵點擊的儲存格不是目前已選中的儲存格時，才執行 SelectCell。
        // 這樣可以避免對已選中的儲存格重複執行 SelectCell，導致其被取消選取的問題。
        if (selectedCellKey != currentCellKey)
        {
            SelectCell(row, col);
        }

        // 設定選單要顯示的座標
        contextMenuX = e.ClientX;
        contextMenuY = e.ClientY;
        // 顯示選單
        showContextMenu = true;
        // 通知 Blazor 進行畫面刷新
        StateHasChanged();
    }

    /// <summary>
    /// 關閉右鍵操作選單
    /// </summary>
    private void CloseContextMenu()
    {
        showContextMenu = false;
        StateHasChanged();
    }

    private async Task ContextMenuAction(MenuAction action)
    {
        // 檢查是否有選中的儲存格
        if (string.IsNullOrEmpty(selectedCellKey))
        {
            CloseContextMenu();
            return;
        }

        switch (action)
        {
            case MenuAction.Approve:
                // [修改] 改為呼叫專門的 ApproveProject 方法
                ApproveProject();
                break;

            case MenuAction.CancelApproval:
                // [修改] 改為呼叫專門的 CancelProjectApproval 方法
                CancelProjectApproval();
                break;

            case MenuAction.CopyFolderPath: // 修改 case
                // 找到選中的儲存格對應的 row 和 column
                DataRow? selectedRow = filteredData.AsEnumerable().FirstOrDefault(r => (r["Stage"]?.ToString() ?? "") == selectedStage && (r["Item"]?.ToString() ?? "") == selectedItem);
                if (selectedRow != null && filteredData.Columns.Contains(selectedProjectName))
                {
                    DataColumn selectedCol = filteredData.Columns[selectedProjectName];
                    // 呼叫新的複製路徑方法
                    await CopyProjectFolderPath(selectedRow, selectedCol);
                }
                break;
        }

        // 執行完動作後，關閉選單
        CloseContextMenu();
    }

    private List<int> YearList = new List<int>();
    // 將所有項目選項合併為一個列表
    private List<string> AllOptions = new List<string>(); // [新增].....
    private List<string> HardwareOptions = new List<string> { "HW1", "HW2", "HW3", "HW4" };
    private List<string> PowerOptions = new List<string> { "PWR1", "PWR2" };

    protected override async Task OnInitializedAsync()
    {
        // 在頁面初始化時，透過 Layout 物件呼叫其公開方法來設定標題
        Layout?.SetPageTitle("儀表板 (Dashboard)");

        int currentYear = DateTime.Now.Year;
        currentYear = 2025; // 根據原始碼，固定為 2025

        int startYear = currentYear + 1;
        int endYear = currentYear - 2;
        for (int year = startYear; year >= endYear; year--)
        {
            YearList.Add(year);
        }

        // 將 HardwareOptions 和 PowerOptions 合併到 AllOptions
        AllOptions.AddRange(HardwareOptions); // [新增].....
        AllOptions.AddRange(PowerOptions); // [新增].....
                                           // 預設選取為使用者部門名稱，如果找不到則設為第一個選項
        _selectedHwOption = AllOptions.FirstOrDefault(o => o == _userInfoService.UserDepartment) ?? AllOptions.FirstOrDefault();
        _selectedYear = currentYear;
        await LoadProjectData();
        await LoadMilestoneData();
        // 初始化時也載入 Milestone 資料
    }
    // 載入 Milestone 資料時，直接初始化 currentMilestones 列表
    private async Task LoadMilestoneData()
    {
        string readsheet = $"ProjectDashboard_A31_HWD_電源部_SOW_{SelectedYear}";
        milestoneData = await Task.Run(() => ReadSQLdata(readsheet));

        // 這一步實現了您的核心需求：
        // 在讀取 SOW 表後，立即建立好 Milestone 的清單結構
        currentMilestones.Clear();
        if (milestoneData != null)
        {
            foreach (DataRow row in milestoneData.Rows)
            {
                var displayName = row["D-Date"]?.ToString();
                var itemKey = row["Item"]?.ToString();

                // 只有當 D-Date 和 Item 都有值時，才將其視為一個有效的 Milestone
                if (!string.IsNullOrWhiteSpace(displayName) && !string.IsNullOrWhiteSpace(itemKey))
                {
                    currentMilestones.Add(new MilestoneInfo
                    {
                        ItemKey = itemKey,
                        DisplayName = displayName
                        // Date 此時為 null
                    });
                }
            }
        }
        StateHasChanged();
    }

    // LoadProjectData 方法，載入新資料時清除選擇
    private async Task LoadProjectData()
    {
        // 載入新資料前，清空變更追蹤
        modifiedProjectColumns.Clear();
        // 清除之前的選擇
        ClearSelection();
        // ... 原有的 LoadProjectData 邏輯保持不變 ...
        if (string.IsNullOrEmpty(SelectedHwOption) || SelectedYear == 0) return;
        isLoading = true;
        StateHasChanged();
        var data = await Task.Run(() =>
        {
            string tableName = $"ProjectDashboard_{SelectedHwOption}_{SelectedYear}";
            return ReadSQLdata(tableName);
        });
        if (data != null && data.Columns.Count > 0) data.Columns.RemoveAt(0);
        projectData = data;
        yellowBackgroundColumns.Clear();
        if (projectData != null)
        {
            var originalColumnNames = projectData.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();
            foreach (var originalName in originalColumnNames)
            {
                if (originalName.Contains("#"))
                {
                    var newName = originalName.Replace("#", "");
                    yellowBackgroundColumns.Add(newName);
                    projectData.Columns[originalName].ColumnName = newName;
                }
            }
        }
        filteredData = projectData.Copy();
        searchTerm = "";
        sortColumn = "";
        sortAscending = true;
        isLoading = false;
        StateHasChanged();
    }

    // 此方法已更新，以包含獲取資料表最後更新時間的邏輯
    private DataTable ReadSQLdata(string readsheet)
    {
        // 您的連接字串，確保 TrustServerCertificate=True 存在以符合 Blazor Server 環境需求
        string connectionString = _configuration.GetConnectionString("ReadConnection_A31_HWD_PWR");
        DataTable dataTable = new DataTable();
        using (SqlConnection cnn = new SqlConnection(connectionString))
        {
            try
            {
                cnn.Open();
                // 獲取資料表最後修改時間的 SQL 查詢
                string timeQuery = @"
                    SELECT MAX(last_user_update) AS last_modified_time
                    FROM sys.dm_db_index_usage_stats
                    WHERE database_id = DB_ID()
                    AND object_id = OBJECT_ID(@tableName)";
                // 執行查詢以獲取時間
                using (SqlCommand timeCmd = new SqlCommand(timeQuery, cnn))
                {
                    timeCmd.Parameters.AddWithValue("@tableName", readsheet);
                    object result = timeCmd.ExecuteScalar();

                    // 更新 sqlQueryTime 的值
                    if (result != null && result != DBNull.Value)
                    {
                        sqlQueryTime = (DateTime)result;
                        // 將查詢到的時間指派給 sqlQueryTime
                    }
                    else
                    {
                        // 如果在 sys.dm_db_index_usage_stats 中查不到時間 (例如，剛建立的資料表還沒有更新紀錄)，則使用當前時間作為備用
                        sqlQueryTime = DateTime.Now;
                    }
                }

                // 原有的讀取資料表主要內容的邏輯
                string query = $"SELECT * FROM {readsheet}";
                using (SqlCommand cmd = new SqlCommand(query, cnn))
                using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                {
                    adapter.Fill(dataTable);
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine($"SQL Error reading {readsheet}: {ex.Message}");
                sqlQueryTime = DateTime.MinValue; // 發生錯誤時，重設時間，避免顯示舊的或錯誤的時間戳記
                return new DataTable();
            }
        }
        return dataTable;
    }


    private void FilterData(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (projectData == null || projectData.Columns.Count == 0) return;
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredData = projectData.Copy();
            StateHasChanged();
            return;
        }

        var columnsToShow = new List<string>();
        // 固定的基礎欄位，如果存在就先加入
        if (projectData.Columns.Contains("Stage")) { columnsToShow.Add("Stage"); }
        if (projectData.Columns.Contains("Item")) { columnsToShow.Add("Item"); }

        // [重大修改] 從 FirstOrDefault() 改為 Where()
        // FirstOrDefault() 只會找到第一個符合的項目就停止
        // Where() 會找出所有符合條件的項目
        var matchedColumns = projectData.Columns.Cast<DataColumn>()
            .Where(c => c.ColumnName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        // 將結果轉換為列表

        // 將所有找到的欄位名稱加入到要顯示的清單中
        foreach (var col in matchedColumns)
        {
            // 避免重複加入 (雖然基礎欄位通常不會和搜尋關鍵字一樣，但這是一個好的程式習慣)
            if (!columnsToShow.Contains(col.ColumnName))
            {
                columnsToShow.Add(col.ColumnName);
            }
        }

        // [邏輯修改] 判斷搜尋結果是否為空
        // 如果除了固定的基礎欄位外，沒有找到任何其他符合的欄位
        // 且使用者有輸入搜尋詞，就顯示一個空的表格結構 (只顯示表頭)
        if (matchedColumns.Count == 0)
        {
            filteredData = projectData.Clone();
            // Clone() 會複製結構但不包含資料
        }
        else
        {
            // 如果有找到符合的欄位，則根據要顯示的欄位清單來建立新的 DataTable
            DataView view = new DataView(projectData);
            filteredData = view.ToTable("FilteredTable", false, columnsToShow.ToArray());
        }

        // 如果之前有設定排序，則重新套用排序
        if (!string.IsNullOrEmpty(sortColumn) && filteredData.Columns.Contains(sortColumn))
        {
            ApplySort();
        }

        StateHasChanged();
    }

    private void ClearSearch()
    {

        searchTerm = "";
        ApplyFilter();
    }

    private void SortData(string columnName)
    {

        if (sortColumn == columnName) { sortAscending = !sortAscending; }
        else { sortColumn = columnName; sortAscending = true; }
        ApplySort();
        StateHasChanged();
    }

    private void ApplySort()
    {

        if (filteredData == null || filteredData.Rows.Count == 0 || string.IsNullOrEmpty(sortColumn)) return;
        if (!filteredData.Columns.Contains(sortColumn)) return;
        try
        {
            DataView view = filteredData.DefaultView;
            view.Sort = $"{sortColumn} {(sortAscending ? "ASC" : "DESC")}";
            filteredData = view.ToTable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"排序錯誤: {ex.Message}");
        }
    }

    //  設定cell Color
    private string GetCellStyle(string cellValue, string columnName)
    {
        // 如果欄位名稱是 "Stage" 或 "Item"，則直接回傳空樣式，不進行後續判斷
        if (columnName == "Stage" || columnName == "Item")
        {
            return "";
        }
        if (string.IsNullOrEmpty(cellValue)) return "";
        return cellValue switch
        {
            // 當儲存格的值以 "*" 開頭時 (表示手動修改過)，將背景設為淺紫色並加上紫色左框線
            var val when val.StartsWith("*") => "background-color: #e8d5ff; border-left: 4px solid #8b5cf6;",

            // 當儲存格的值包含 "#" 時 (表示七日內到期)
            var val when val.Contains("#") => "background-color: #FFFF00; border-left: 4px solid #FFD700;",

            // 當儲存格的值包含 "!" 時 (表示已過期)，將背景設為淡紅色、加上紅色左框線，並將字體設為粗體
            var val when val.Contains("!") => "background-color: #ffcccc; border-left: 4px solid #dc3545; font-weight: bold;",

            // 當儲存格的值等於 "Ready" (不分大小寫)
            var val when val.Equals("Ready") => "background-color: #fef3c7; border-left: 4px solid #f59e0b;",

            // 當儲存格的值包含 "Checked" 時 (表示已檢查)，將背景設為淺黃色並加上金黃色左框線
            var val when val.Contains("Checked") => "background-color: #cffafe; border-left: 4px solid #06b6d4;",

            // 當儲存格的值包含 "Approval" 時 (表示已批准)，將背景設為淡綠色並加上綠色左框線
            var val when val.Contains("Approval") => "background-color: #d4edda; border-left: 4px solid #28a745;",

            // 當儲存格的值等於 "N/A" (不分大小寫) 時，將背景設為深灰色、文字設為白色
            var val when val.Equals("N/A", StringComparison.OrdinalIgnoreCase) => "background-color: #64748b; color: white; text-align: center; font-weight: 500;",

            // 當儲存格的值等於 "Non-Ready" (不分大小寫) 時，將背景設為淺灰藍色、文字設為深灰色
            var val when val.Equals("Non-Ready", StringComparison.OrdinalIgnoreCase) => "background-color: #f1f5f9; color: #475569; font-style: italic; border-left: 4px solid #cbd5e1;",

            _ => ""
        };
    }

    private MarkupString GetStatusIndicator(string cellValue)
    {

        if (string.IsNullOrEmpty(cellValue)) return new MarkupString("");
        var indicator = cellValue switch
        {
            var val when val.Contains("!") => "<span class='status-indicator status-error'></span>",
            var val when val.Contains("#") => "<span class='status-indicator status-warning'></span>",
            var val when val.Equals("Ready", StringComparison.OrdinalIgnoreCase) => "<span class='status-indicator status-info'></span>",
            var val when val.Contains("Checked") || val.Contains("Approval") => "<span class='status-indicator status-ready'></span>",
            _ => ""
        };
        return new MarkupString(indicator);
    }

    private string CleanCellValue(string cellValue)
    {
        if (string.IsNullOrEmpty(cellValue)) return "";
        if (cellValue.Contains("2999")) return "Non-Ready";
        return cellValue.Replace("#", "").Replace("!", "");
    }
    /// <summary>
    /// 組合專案資料夾路徑並將其複製到剪貼簿
    /// </summary>
    private async Task CopyProjectFolderPath(DataRow row, DataColumn column)
    {
        // 1. 組合路徑的邏輯與 OpenProjectFolder 完全相同
        if (row == null || column == null) return;
        if (!row.Table.Columns.Contains("Stage") || !row.Table.Columns.Contains("Item")) return;

        string projectName = column.ColumnName;
        string stage = row["Stage"].ToString() ?? "";
        string item = row["Item"].ToString() ?? "";
        string year = SelectedYear.ToString();
        string sowPath = "";
        switch (SelectedHwOption)
        {
            case "HW1": sowPath = @"\\tpea31hwdfs01\專案執行\HW1\0.SOW"; break;
            case "HW2": sowPath = @"\\tpea31hwdfs01\專案執行\HW2\0.SOW"; break;
            case "HW3": sowPath = @"\\tpea31hwdfs01\專案執行\HW3\0.SOW"; break;
            case "HW4": sowPath = @"\\tpea31hwdfs01\專案執行\HW4\0.SOW"; break;
            case "PWR1": sowPath = @"\\tpea31hwdfs01\專案執行\PWR1\01.Projects"; break;
            case "PWR2": sowPath = @"\\tpea31hwdfs01\專案執行\PWR2\0.SOW"; break;
            default:
                Console.WriteLine($"未知的硬體選項 '{SelectedHwOption}'，無法確定資料夾路徑。");
                // 改為呼叫 showToast
                await JSRuntime.InvokeVoidAsync("showToast", $"無法產生路徑：未知的選項 '{SelectedHwOption}'", "danger");
                return;
        }

        string fullPath = System.IO.Path.Combine(sowPath, year, projectName, stage, item);

        // 2. 呼叫 JavaScript 函式將路徑複製到剪貼簿
        try
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", fullPath);
            // 呼叫新的 showToast 函式，並傳入 'success' 狀態
            await JSRuntime.InvokeVoidAsync("showToast", "路徑已成功複製到剪貼簿！", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"複製路徑失敗: {ex.Message}");
            // 呼叫新的 showToast 函式，並傳入 'danger' 狀態
            await JSRuntime.InvokeVoidAsync("showToast", "複製路徑失敗。", "danger");
        }
    }



    // 處理儲存格點擊事件
    private void SelectCell(DataRow row, DataColumn column)
    {
        if (row == null || column == null) return;
        // 如果點擊的是 Stage 或 Item 欄位，則不進行選擇
        if (column.ColumnName == "Stage" || column.ColumnName == "Item") return;
        string stage = row["Stage"]?.ToString() ?? "";
        string item = row["Item"]?.ToString() ?? "";
        string projectName = column.ColumnName;
        // 建立唯一的儲存格鍵值
        string cellKey = $"{stage}_{item}_{projectName}";
        // 如果點擊的是同一個儲存格，則取消選擇
        if (selectedCellKey == cellKey)
        {
            selectedCellKey = "";
            selectedProjectName = "";
            selectedStage = "";
            selectedItem = "";
        }
        else
        {
            // 否則選擇新的儲存格
            selectedCellKey = cellKey;
            selectedProjectName = projectName;
            selectedStage = stage;
            selectedItem = item;
        }

        StateHasChanged();
        // [可選] 在控制台輸出選中資訊，方便偵錯
        if (!string.IsNullOrEmpty(selectedCellKey))
        {
            Console.WriteLine($"已選中儲存格 - 專案: {selectedProjectName}, Stage: {selectedStage}, Item: {selectedItem}");
        }
        else
        {
            Console.WriteLine("已取消選擇儲存格");
        }
    }

    // 檢查儲存格是否被選中
    private bool IsCellSelected(DataRow row, DataColumn column)
    {
        if (string.IsNullOrEmpty(selectedCellKey) || row == null || column == null) return false;
        string stage = row["Stage"]?.ToString() ?? "";
        string item = row["Item"]?.ToString() ?? "";
        string projectName = column.ColumnName;
        string cellKey = $"{stage}_{item}_{projectName}";
        return selectedCellKey == cellKey;
    }

    // 清除選擇
    private void ClearSelection()
    {
        selectedCellKey = "";
        selectedProjectName = "";
        selectedStage = "";
        selectedItem = "";
        StateHasChanged();
    }

    // [新增] 專門處理「核准」操作的邏輯 (正向流程)
    private void ApproveProject()
    {
        if (!string.IsNullOrEmpty(selectedCellKey) && _userInfoService != null && _userInfoService.IsInitialized)
        {
            string currentCellValue = GetCellValue(projectData, selectedStage, selectedItem, selectedProjectName) ?? "";
            string newValue = currentCellValue;

            if (_userInfoService.UserRole == "DL")
            {
                // DL 的職責是將 "Ready" 狀態推進為 "Checked"
                if (currentCellValue.Contains("Ready") && !currentCellValue.Contains("Non-Ready"))
                {
                    newValue = "*Checked";
                }
            }
            else if (_userInfoService.UserRole == "DM" || _userInfoService.UserRole == "FM")
            {
                // DM/FM 的職責是將 "Ready" 或 "Checked" 狀態推進為 "Approval"
                if ((currentCellValue.Contains("Ready") && !currentCellValue.Contains("Non-Ready")) || currentCellValue.Contains("Checked"))
                {
                    newValue = "*Approval";
                }
            }

            // 如果值有實際變更，才執行更新
            if (newValue != currentCellValue)
            {
                UpdateCellValue(projectData, selectedStage, selectedItem, selectedProjectName, newValue);
                UpdateCellValue(filteredData, selectedStage, selectedItem, selectedProjectName, newValue);
                if (!modifiedProjectColumns.Contains(selectedProjectName))
                {
                    modifiedProjectColumns.Add(selectedProjectName);
                }
                StateHasChanged();
            }
        }
        else
        {
            if (string.IsNullOrEmpty(selectedCellKey))
            {
                Console.WriteLine("錯誤：請先在表格中選擇一個儲存格。");
            }
            else
            {
                Console.WriteLine("錯誤：使用者資訊尚未初始化，無法執行操作。");
            }
        }
    }

    // [新增] 專門處理「取消核准」操作的邏輯 (逆向流程)
    private void CancelProjectApproval()
    {
        if (!string.IsNullOrEmpty(selectedCellKey) && _userInfoService != null && _userInfoService.IsInitialized)
        {
            string currentCellValue = GetCellValue(projectData, selectedStage, selectedItem, selectedProjectName) ?? "";
            string newValue = currentCellValue;

            if (_userInfoService.UserRole == "DL")
            {
                // DL 可以將 "Checked" 狀態退回為 "Ready"
                if (currentCellValue.Contains("Checked"))
                {
                    newValue = "*Ready";
                }
            }
            else if (_userInfoService.UserRole == "DM" || _userInfoService.UserRole == "FM")
            {
                // DM 或 FM 可以將 "Approval" 狀態退回為 "Ready"
                if (currentCellValue.Contains("Approval"))
                {
                    newValue = "*Ready";
                }
            }

            // 如果值有實際變更，才執行更新
            if (newValue != currentCellValue)
            {
                UpdateCellValue(projectData, selectedStage, selectedItem, selectedProjectName, newValue);
                UpdateCellValue(filteredData, selectedStage, selectedItem, selectedProjectName, newValue);
                if (!modifiedProjectColumns.Contains(selectedProjectName))
                {
                    modifiedProjectColumns.Add(selectedProjectName);
                }
                StateHasChanged();
            }
        }
        else
        {
            if (string.IsNullOrEmpty(selectedCellKey))
            {
                Console.WriteLine("錯誤：請先在表格中選擇一個儲存格。");
            }
            else
            {
                Console.WriteLine("錯誤：使用者資訊尚未初始化，無法執行操作。");
            }
        }
    }

    // 輔助方法：用於取得指定儲存格的值
    private string? GetCellValue(DataTable table, string stage, string item, string columnName)
    {
        if (table == null || !table.Columns.Contains(columnName) || !table.Columns.Contains("Stage") || !table.Columns.Contains("Item"))
        {
            return null;
        }

        DataRow? row = table.AsEnumerable()
            .FirstOrDefault(r =>
                (r.Field<string>("Stage") ?? "") == stage &&
                (r.Field<string>("Item") ?? "") == item);
        return row?[columnName]?.ToString();
    }

    // 輔助方法：用於更新指定 DataTable 中的儲存格內容
    private void UpdateCellValue(DataTable table, string stage, string item, string columnName, string newValue)
    {
        // 防呆判斷，確保 table 和指定的欄位都存在
        if (table == null || !table.Columns.Contains(columnName) || !table.Columns.Contains("Stage") || !table.Columns.Contains("Item"))
        {
            return;
        }

        // 使用 LINQ 從 DataTable 中尋找符合條件的第一筆資料列 (DataRow)
        // 條件：Stage 和 Item 的值必須與選中的儲存格完全相符
        DataRow? rowToUpdate = table.AsEnumerable()
            .FirstOrDefault(row =>
                (row.Field<string>("Stage") ?? "") == stage &&
                (row.Field<string>("Item") ?? "") == item);
        // 如果找到了符合的資料列
        if (rowToUpdate != null)
        {
            // 更新該列中指定欄位 (columnName) 的值
            rowToUpdate[columnName] = newValue;
        }
    }
    private async Task UpdateToServer()
    {
        // 如果沒有任何已修改的欄位，則直接返回，不執行任何動作
        if (modifiedProjectColumns.Count == 0)
        {
            errorMessage = "沒有偵測到任何變更，無需儲存。";
            await ShowErrorModal();
            return;
        }

        // 顯示載入狀態，防止使用者重複點擊
        isLoading = true;
        StateHasChanged();

        // 準備一個 DataTable 來存放所有待更新的資料
        DataTable modifiedData = new DataTable();
        modifiedData.Columns.Add("Division");
        modifiedData.Columns.Add("Department");
        modifiedData.Columns.Add("ProjectCode");
        modifiedData.Columns.Add("ProjectYear");
        modifiedData.Columns.Add("Stage");
        modifiedData.Columns.Add("Item");
        modifiedData.Columns.Add("UserName");
        modifiedData.Columns.Add("UserAction");
        modifiedData.Columns.Add("UpdateTime");

        try
        {
            // 遍歷所有被標記為"已修改"的專案欄位
            foreach (var projectCode in modifiedProjectColumns)
            {
                // 遍歷 projectData 中的每一行，找出該專案欄位下有變更的儲存格
                for (int i = 0; i < projectData.Rows.Count; i++)
                {
                    string stage = projectData.Rows[i]["Stage"].ToString();
                    string item = projectData.Rows[i]["Item"].ToString();
                    string currentAction = projectData.Rows[i][projectCode].ToString();

                    // 就像您在 WinForms 中一樣，我們以 "*" 作為已變更的標記
                    if (currentAction.Contains("*"))
                    {
                        DataRow newRow = modifiedData.NewRow();
                        newRow["Division"] = "A31_HWD"; // 您可以根據需要動態設定
                        newRow["Department"] = SelectedHwOption;
                        newRow["ProjectCode"] = projectCode;
                        newRow["ProjectYear"] = SelectedYear.ToString();
                        newRow["Stage"] = stage;
                        newRow["Item"] = item;
                        newRow["UserName"] = _userInfoService.UserName;
                        newRow["UserAction"] = currentAction.Replace("*", "");
                        // 移除標記
                        newRow["UpdateTime"] = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        modifiedData.Rows.Add(newRow);
                    }
                }
            }

            // 如果有收集到待更新的資料，才執行資料庫操作
            if (modifiedData.Rows.Count > 0)
            {

                string connectionString = _configuration.GetConnectionString("WriteConnection_A31_HWD_PWR");

                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    await conn.OpenAsync();
                    // 記錄更新的筆數
                    int recordsUpdated = 0;
                    // 使用 SQL MERGE 陳述式來批次更新或插入資料，效率更高
                    var mergeCommandText = @"
                    MERGE INTO ProjectDashboard_A31_HWD_電源部_SOW_Record AS Target
                    USING (VALUES (@Division, @Department, @ProjectCode, @ProjectYear, @Stage, @Item, @UserName, @UserAction, @UpdateTime))
                    AS Source (Division, Department, ProjectCode, ProjectYear, Stage, Item, UserName, UserAction, UpdateTime)
                    ON Target.Division = Source.Division AND Target.Department = Source.Department
                       AND Target.ProjectCode = Source.ProjectCode AND Target.ProjectYear = Source.ProjectYear
                       AND Target.Stage = Source.Stage AND Target.Item = Source.Item
                    WHEN MATCHED THEN
                        UPDATE SET Target.UserAction = Source.UserAction, Target.UpdateTime = Source.UpdateTime, Target.UserName = Source.UserName
                    WHEN NOT MATCHED THEN
                        INSERT (Division, Department, ProjectCode, ProjectYear, Stage, Item, UserName, UserAction, UpdateTime)
                        VALUES (Source.Division, Source.Department, Source.ProjectCode, Source.ProjectYear, Source.Stage, Source.Item, Source.UserName, Source.UserAction, Source.UpdateTime);";
                    // 遍歷收集到的變更，逐一執行 MERGE 命令
                    foreach (DataRow row in modifiedData.Rows)
                    {
                        using (SqlCommand cmd = new SqlCommand(mergeCommandText, conn))
                        {
                            cmd.Parameters.AddWithValue("@Division", row["Division"]);
                            cmd.Parameters.AddWithValue("@Department", row["Department"]);
                            cmd.Parameters.AddWithValue("@ProjectCode", row["ProjectCode"]);
                            cmd.Parameters.AddWithValue("@ProjectYear", row["ProjectYear"]);
                            cmd.Parameters.AddWithValue("@Stage", row["Stage"]);
                            cmd.Parameters.AddWithValue("@Item", row["Item"]);
                            cmd.Parameters.AddWithValue("@UserName", row["UserName"]);
                            cmd.Parameters.AddWithValue("@UserAction", row["UserAction"]);
                            cmd.Parameters.AddWithValue("@UpdateTime", row["UpdateTime"]);
                            await cmd.ExecuteNonQueryAsync();
                        }
                    }
                    // 設定成功訊息並準備詳細資訊以便在 Modal 中顯示
                    updatedRecordsCount = modifiedData.Rows.Count;
                    // 使用實際處理的資料筆數

                    // 建立一個字典來計算每個專案更新了多少項目
                    var projectUpdateCounts = modifiedData.AsEnumerable()
                        .GroupBy(row => row.Field<string>("ProjectCode"))
                        .ToDictionary(g => g.Key, g => g.Count());

                    successMessage = $"已成功將 {projectUpdateCounts.Count} 個專案的變更儲存至雲端資料庫。";

                    successDetails.Clear(); // 先清除舊的詳細資訊
                    foreach (var project in projectUpdateCounts)
                    {
                        // 為每個更新的專案產生一條詳細訊息，使用 <strong> 標籤來強調
                        successDetails.Add($"專案 <strong>{project.Key}</strong> 更新了 <strong>{project.Value}</strong> 個項目。");
                    }

                    // 顯示成功 Modal
                    Console.WriteLine("變更已成功儲存至雲端。");
                    await ShowSuccessModal();

                    // 儲存成功後，清除已修改的專案追蹤，避免重複提交
                    modifiedProjectColumns.Clear();
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存至伺服器時發生錯誤：{ex.Message}");
            errorMessage = $"儲存過程中發生錯誤：{ex.Message}";
            await ShowErrorModal();
        }
        finally
        {
            // 無論成功或失敗，都結束載入狀態
            isLoading = false;
            StateHasChanged();
        }
    }

    // 顯示成功 Modal 的方法
    private async Task ShowSuccessModal()
    {
        try
        {
            // 改為呼叫我們在 app.js 中定義的函式，並傳入 Modal 的 ID
            await JSRuntime.InvokeVoidAsync("showBootstrapModal", "successModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"顯示成功 Modal 時發生錯誤：{ex.Message}");
            // 如果 JS Interop 失敗，回退到簡單的 alert 作為備用方案
            await JSRuntime.InvokeVoidAsync("alert", successMessage);
        }
    }

    // 計算專案數量 (總欄位數 - 固定的 'Stage' 和 'Item' 欄位)
    private int GetProjectCount(DataTable? table)
    {
        // 防呆處理：如果傳入的 DataTable 是 null 或沒有任何欄位，則回傳 0
        if (table == null || table.Columns.Count == 0) return 0;
        // 取得目前的總欄位數
        int projectCount = table.Columns.Count;
        // 如果 'Stage' 欄位存在，計數就減 1
        if (table.Columns.Contains("Stage")) projectCount--;
        // 如果 'Item' 欄位存在，計數就再減 1
        if (table.Columns.Contains("Item")) projectCount--;
        // 返回最終計算結果，並確保結果不會是負數
        return Math.Max(0, projectCount);
    }
    // 顯示錯誤 Modal 的方法
    private async Task ShowErrorModal()
    {
        try
        {
            // 改為呼叫我們在 app.js 中定義的函式，並傳入 Modal 的 ID
            await JSRuntime.InvokeVoidAsync("showBootstrapModal", "errorModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"顯示錯誤 Modal 時發生錯誤：{ex.Message}");
            // 如果 JS Interop 失敗，回退到簡單的 alert 作為備用方案
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    // 計算各種狀態的數量
    private int GetStatusCount(string status)
    {
        if (projectData == null || projectData.Rows.Count == 0) return 0;

        int count = 0;

        // 遍歷所有非 Stage 和 Item 的專案欄位
        foreach (DataColumn column in projectData.Columns)
        {
            if (column.ColumnName == "Stage" || column.ColumnName == "Item") continue;

            // 遍歷該欄位下的所有儲存格
            foreach (DataRow row in projectData.Rows)
            {
                string cellValue = row[column].ToString() ?? "";

                // 根據狀態類型進行計數
                switch (status)
                {
                    case "Non-Ready":
                        if (cellValue.Contains("2999") ||
                            cellValue.Equals("Non-Ready", StringComparison.OrdinalIgnoreCase) ||
                            string.IsNullOrWhiteSpace(cellValue))
                        {
                            count++;
                        }
                        break;

                    case "Ready":
                        if (cellValue.Contains("Ready") && !cellValue.Contains("Non-Ready"))
                        {
                            count++;
                        }
                        break;

                    case "Checked":
                        if (cellValue.Contains("Checked"))
                        {
                            count++;
                        }
                        break;

                    case "Approval":
                        if (cellValue.Contains("Approval"))
                        {
                            count++;
                        }
                        break;

                    case "Overdue":
                        if (cellValue.Contains("!"))
                        {
                            count++;
                        }
                        break;
                }
            }
        }

        return count;
    }

    // 用於在 Modal 中顯示的當前專案名稱
    private string modalProjectName = "";
    // 修改開啟 Modal 的方法，更新個別專案資訊
    private async Task OpenProjectInfoModal(string projectName)
    {
        modalProjectName = projectName;
        // 初始當下專案里程碑
        foreach (var milestone in currentMilestones)
        {
            milestone.Date = null;
        }

        // 初始人員清冊
        projectPersonnel = new ProjectPersonnel();
        // 從 SQL 讀取專案資訊
        await LoadProjectInfoFromSql(projectName);

        await JSRuntime.InvokeVoidAsync("showBootstrapModal", "projectInfoModal");
        StateHasChanged();
    }
    // 從 SQL 讀取專案資訊
    private async Task LoadProjectInfoFromSql(string projectName)
    {
        string connectionString = _configuration.GetConnectionString("ReadConnection_A31_HWD_PWR");
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                await conn.OpenAsync();
                // 查詢符合年份和專案名稱的記錄
                string query = @"
                SELECT ProjectCode, DMRole, DLRole, DERole, Schedule
                FROM ProjectDashboard_A31_HWD_電源部_ProjectInfo
                WHERE Year = @Year AND ProjectCode = @ProjectCode";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@Year", SelectedYear);
                    cmd.Parameters.AddWithValue("@ProjectCode", projectName);

                    using (SqlDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        if (reader.Read())
                        {
                            // 填入專案人員資訊
                            projectPersonnel.DM = reader["DMRole"]?.ToString() ?? "";
                            projectPersonnel.DL = reader["DLRole"]?.ToString() ?? "";
                            projectPersonnel.DE = reader["DERole"]?.ToString() ?? "";
                            // 解析 Schedule 欄位
                            string scheduleData = reader["Schedule"]?.ToString() ?? "";
                            ParseScheduleData(scheduleData);

                            Console.WriteLine($"已載入專案 '{projectName}' 的資訊：DM={projectPersonnel.DM}, DL={projectPersonnel.DL}, DE={projectPersonnel.DE}");
                        }
                        else
                        {
                            Console.WriteLine($"在資料庫中找不到專案 '{projectName}' (年份：{SelectedYear}) 的資訊");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入專案資訊時發生錯誤：{ex.Message}");
            // 發生錯誤時保持空白狀態
        }
    }
    // D-Date
    // ParseScheduleData 的職責簡化為「填充日期」到已存在的列表中
    private void ParseScheduleData(string scheduleData)
    {
        // 在解析新資料前，先清除所有舊的日期
        foreach (var milestone in currentMilestones)
        {
            milestone.Date = null;
        }

        if (string.IsNullOrWhiteSpace(scheduleData)) return;

        var milestoneItems = scheduleData.Split('#', StringSplitOptions.RemoveEmptyEntries);
        foreach (var item in milestoneItems)
        {
            var parts = item.Split(';');
            if (parts.Length >= 2)
            {
                string milestoneName = parts[0].Trim();
                string milestoneDate = parts[1].Trim();

                // 在 currentMilestones 列表中尋找顯示名稱相符的項目
                var targetMilestone = currentMilestones.FirstOrDefault(m => m.DisplayName.Equals(milestoneName, StringComparison.OrdinalIgnoreCase));
                // 如果找到了，就更新它的 Date 屬性
                if (targetMilestone != null)
                {
                    targetMilestone.Date = milestoneDate;
                }
            }
        }
    }


    private async Task SaveProjectInfo()
    {
        isSavingProjectInfo = true;
        // 開始儲存，顯示動畫
        StateHasChanged();
        try
        {
            // [步驟 1] 將變更的專案欄位名稱加入追蹤集合，以便後續能上傳到伺服器
            if (!modifiedProjectColumns.Contains(modalProjectName))
            {
                modifiedProjectColumns.Add(modalProjectName);
            }

            // [步驟 2] 準備要寫入後端資料庫的資料
            string dmRole = CleanMemberString(projectPersonnel.DM);
            string dlRole = CleanMemberString(projectPersonnel.DL);
            string deRole = CleanMemberString(projectPersonnel.DE);

            // 篩選出有日期的 Milestone 項目，並存為一個列表以供後續使用
            var updatedMilestones = currentMilestones
                .Where(m => !string.IsNullOrWhiteSpace(m.Date))
                .ToList();
            // 使用 updatedMilestones 列表來產生要存入資料庫的 scheduleString
            string scheduleString = string.Join("#", updatedMilestones.Select(m => $"{m.DisplayName};{m.Date}"));
            // [步驟 3] 執行後端資料庫儲存
            string connectionString = _configuration.GetConnectionString("WriteConnection_A31_HWD_PWR");
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                await conn.OpenAsync();
                string mergeQuery = @"
            MERGE INTO ProjectDashboard_A31_HWD_電源部_ProjectInfo AS Target
            USING (VALUES (@ProjectCode, @Year)) AS Source (ProjectCode, Year)
            ON Target.ProjectCode = Source.ProjectCode AND Target.Year = Source.Year
            WHEN MATCHED THEN
                UPDATE SET Division = @Division, Department = @Department, DMRole = @DMRole,
                        DLRole = @DLRole, DERole = @DERole, Schedule = @Schedule, Status = @Status
            WHEN NOT MATCHED THEN
                INSERT (ProjectCode, Division, Department, DMRole, DLRole, DERole, Year, Schedule, Status)
                VALUES (@ProjectCode, @Division, @Department, @DMRole, @DLRole, @DERole, @Year, @Schedule, @Status);";
                using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
                {
                    cmd.Parameters.AddWithValue("@ProjectCode", modalProjectName);
                    cmd.Parameters.AddWithValue("@Year", SelectedYear);
                    cmd.Parameters.AddWithValue("@Division", _userInfoService.UserDivision ?? "A31_HWD");
                    cmd.Parameters.AddWithValue("@Department", SelectedHwOption);
                    cmd.Parameters.AddWithValue("@DMRole", dmRole);
                    cmd.Parameters.AddWithValue("@DLRole", dlRole);
                    cmd.Parameters.AddWithValue("@DERole", deRole);
                    cmd.Parameters.AddWithValue("@Schedule", scheduleString);
                    cmd.Parameters.AddWithValue("@Status", "進行中");

                    await cmd.ExecuteNonQueryAsync();
                    Console.WriteLine($"專案 '{modalProjectName}' 的詳細資訊已成功儲存至資料庫。");
                }
            }


            // [步驟 4] 關閉編輯 Modal 並顯示成功訊息
            await JSRuntime.InvokeVoidAsync("hideBootstrapModal", "projectInfoModal");
            // 設定成功訊息內容
            successMessage = $"專案 '{modalProjectName}' 的資訊已成功儲存。";
            successDetails.Clear();
            successDetails.Add($"<strong>專案人員 (已更新):</strong>");
            successDetails.Add($"&bull; DM: {(!string.IsNullOrWhiteSpace(dmRole) ? dmRole : "未設定")}");
            successDetails.Add($"&bull; DL: {(!string.IsNullOrWhiteSpace(dlRole) ? dlRole : "未設定")}");
            successDetails.Add($"&bull; DE: {(!string.IsNullOrWhiteSpace(deRole) ? deRole : "未設定")}");

            if (updatedMilestones.Any())
            {
                // 產生更詳細的成功訊息標頭，加上冒號
                successDetails.Add($"<hr class='my-2'><strong>專案時程 (共 {updatedMilestones.Count} 項已更新):</strong>");
                // 遍歷所有更新的 Milestone，將每一項的名稱和日期都加入到詳細清單中
                foreach (var milestone in updatedMilestones)
                {
                    successDetails.Add($"&bull; {milestone.DisplayName}: <strong>{milestone.Date}</strong>");
                }
            }
            updatedRecordsCount = 1;
            // 代表一筆專案資訊紀錄

            await ShowSuccessModal();
            // 顯示成功 Modal
        }
        catch (Exception ex)
        {
            // 錯誤處理流程
            Console.WriteLine($"儲存專案資訊至資料庫時發生錯誤：{ex.Message}");
            errorMessage = $"儲存專案資訊失敗：{ex.Message}";
            // 關閉編輯視窗，再顯示錯誤視窗，避免疊加
            await JSRuntime.InvokeVoidAsync("hideBootstrapModal", "projectInfoModal");
            await ShowErrorModal();
        }
        finally
        {
            isSavingProjectInfo = false;
            // 無論成功或失敗，都結束儲存狀態，隱藏動畫
            StateHasChanged();
            // 通知 Blazor 刷新介面
        }
    }

    private void UpdateCellValue(DataTable table, string item, string columnName, string newValue)
    {
        if (table == null || !table.Columns.Contains(columnName) || !table.Columns.Contains("Item"))
        {
            return;
        }

        DataRow? rowToUpdate = table.AsEnumerable()
            .FirstOrDefault(row => (row.Field<string>("Item") ?? "") == item);
        if (rowToUpdate != null)
        {
            // 直接更新傳入的值，不再額外加上星號
            rowToUpdate[columnName] = newValue;
        }
    }
    private string CleanMemberString(string? input)
    {
        if (string.IsNullOrEmpty(input)) return string.Empty;
        // 1. 將多人時可能出現的中英文逗號統一替換為分號
        var cleaned = input.Replace(",", ";").Replace("，", ";");
        // 2. 移除所有空白字元
        cleaned = Regex.Replace(cleaned, @"\s+", "");
        // 3. 忽略大小寫，移除 @compal.com 後綴
        cleaned = Regex.Replace(cleaned, "@compal\\.com", "", RegexOptions.IgnoreCase);
        return cleaned;
    }
    // 建立一個專門用來存放 Milestone 所有資訊的 class
    private class MilestoneInfo
    {
        // 用於後端邏輯和資料綁定的唯一 Key (例如: SOW_001)
        public string ItemKey { get; set; } = "";
        // 用於在 UI 上顯示的名稱 (例如: RFI close)
        public string DisplayName { get; set; } = "";
        // 使用者輸入的日期
        public string? Date { get; set; }
    }

    private void UpdateProjectInfo() { Console.WriteLine("準備更新專案資訊..."); }

}